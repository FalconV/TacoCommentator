#  #!/usr/bin/python

from __future__ import print_function
from multiprocessing import Process, Queue
import socket
import sys
import datetime
#import Queue
import time
import serial
import RPi.GPIO as GPIO
import smtplib

def send(q):
    s = "0,0,0,0*324*\n"
    q.put(s)
    while True:
        if not q.empty():
            try:
                s = q.get(False)
                if s == "END":
                    return
            except q.empty():
                pass
            #print ('sending ' + s)
            if quad_attached:
                #write to serial
                ser.write(s)
                received = ser.readline()
                #print (received)
                while received != "OK\r\n":
                    #if the falcon waited too long for you
                    if received == "TIMEOUT\r\n" or received == "MISS\r\n":
                        #repeat yourself
                        ser.write(s)
                        #print 'RTX'
#                       print ('resending: ' + s)
                    else:
                        pass
#                       print (received)
                    #listen to the falcon while you wait
                    received = ser.readline()
#                   print (received)

            time.sleep(.1)

def sock(q):

    packcount = 0
    
    #grabbing the pi ip and sending it through email
    ipsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        ipsock.connect(("gmail.com", 8080))
    except IOError:
        print('no internet detected')
        GPIO.Output(nowifi_led, 1)
    time.sleep(5)
    loc_ip = ipsock.getsockname()[0]
    #server = smtplib.SMTP('smtp.gmail.com:587')
    #server.ehlo()
    #server.starttls()
    #server.ehlo()
    #server.login("falconv.uh@gmail.com",'falconners')
    #server.sendmail('ip_update@gmail.com','falconv.uh@gmail.com',loc_ip)
    #server.quit()
    #ipsock.close()
    
    ####socket setup####
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.setblocking(1)
    close_flag = 0
    #bind the socket to the port, MAKE SURE IP ADDRESS AND PORT ARE CORRECT EACH TIME $
    port = 8888
    while port:
        try:
            server_address = (loc_ip, port)
            sock.bind(server_address)
        except IOError:
            port += 1
        else:
            eport = port
            port = 0
    print ('starting up on %s port %s' % server_address)
    print (loc_ip)

    server = smtplib.SMTP('smtp.gmail.com:587')
    server.ehlo()
    server.starttls()
    server.ehlo()
    server.login("falconv.uh@gmail.com",'falconners')
    emsg = loc_ip + ' ' + str(eport)
    server.sendmail('ip_update@gmail.com','falconv.uh@gmail.com',emsg)
    #server.sendmail('ip_update@gmail.com','falconv.uh@gmail.com',str(port))
    server.quit()
    ipsock.close()

    #listen for incoming connections
    sock.listen(1)
    #wait for connection
    #while True:
    GPIO.output(awaiting_connection_led, 1)
    connection, client_address = sock.accept()
    GPIO.output(awaiting_connection_led, 0)
    close_flag = 0

    while True:
	if close_flag == 1:
	    connection, client_address = sock.accept()
	    close_flag = 0
        try:
            #receive the data in small chuncks and put on queue
            while True:
		time.sleep(.1)
                #print ('waiting on data')
                data = connection.recv(24)
		for d in data[2:len(data)]:
		    if d == '=':
			dataToSend = '';
		    elif d == '\n':
			break;
		    else:
			dataToSend += d;
                #print (data)
                #print ('data received')
                #if data[2] != '=':
                #    continue
                if not data:
                    print ('data is empty')
                    close_flag = 1
                    break
                #close_check = data[3:8]
		close_check = dataToSend[0:4]
                if close_check == 'close':
                    print ('closing conection')
                    close_flag = 1
                    break
                #print (data)
                checksum = 0
                #for c in data[3:(len(data) - 1)]:
                for c in dataToSend:
		    #print (ord(c))
                    checksum += ord(c)
                #s = data[3:(len(data)-1)] + '*' + '%d' % checksum + '*\n'
                s = dataToSend + '*' + '%d' % checksum + '*\n'
		print (datetime.datetime.now().strftime("%H:%M:%S.%f") + ' received %s' % s)
                q.put(s)
                if data:
                    #connection.sendall(data)
                    #data = data + 'append'
                    break
                else:
                    print ('no more data from', client_address)
                    break
                      
        finally:
            #end of packet
            #if close_flag:
                #if close flag set, end sock
                #break
            packcount = packcount + 1
            #if packcount == 120:
            #    close_flag = 1
            #print ('packet ', packcount, ' sent')

    #connection.close()
    #sock.close()
    print ('connection closed')

if __name__ == '__main__':
    loc_ip = ""
    
    #status leds setup
    GPIO.setmode(GPIO.BCM)
    program_running_led = 24
    nousb_led = 18
    awaiting_connection_led = 4
    nowifi_led = 25
    GPIO.setup(awaiting_connection_led, GPIO.OUT)
    GPIO.setup(nousb_led, GPIO.OUT)
    GPIO.setup(program_running_led, GPIO.OUT)
    GPIO.setup(nowifi_led, GPIO.OUT)
    GPIO.output(program_running_led, 1)
    GPIO.output(awaiting_connection_led, 0)
    GPIO.output(nousb_led, 0)
    GPIO.output(nowifi_led, 0)

    #set up serial over USB
    quad_attached = 1
    try:
        ser = serial.Serial('/dev/ttyUSB0', timeout=1, baudrate=115200)
    except serial.SerialException:
        try:
            ser = serial.Serial('/dev/ttyUSB1', timeout=1, baudrate=115200)
        except serial.SerialException:
            try:
                ser = serial.Serial('/dev/ttyUSB2', timeout=1, baudrate=115200)
            except serial.SerialException:
                #print ('no usb detected')
                GPIO.output(nousb_led, 1)
                quad_attached = 0


    queue = Queue()
    process1 = Process(target=send, args=(queue,))
    process3 = Process(target=sock, args=(queue,))
    print ('starting thread 1')
    process1.start()
    print ('starting thread 3')
    process3.start()
    print ('joining thread 1')
    process1.join()
    print ('joining thread 3')
    process3.join()
    print ('all done')
